"use strict";
const esManager = require('./esManager');
const util = require('../helpers/util');
var logGenerator = require("../helpers/logGenerator"),
	logger = logGenerator.getApplicationLogger();

async function totalTickets(index, tenant_id) {
    const body = `{ "track_total_hits": true, "query": {"bool": {"must": [{"match": {"tenant_id.keyword": "${tenant_id}"}},
                    {"match": {"ticket_class.keyword": "INCIDENT"}},{"range": {"open_dttm": {"gte": "now-30d","lt": "now"}}}],
                    "should": [{"term": {"autogenerated.keyword": "N"}},{"term": {"autogenerated.keyword": "Y"}}]}},"size": 0}`
    try {
        const res = await esManager.searchDoc(index, JSON.parse(body));
        var totalTickets = 0;
        if (res && res.hits && res.hits.total && res.hits.total.value)
            totalTickets = res.hits.total.value;
        logger.info("Total tickets count from ES Query: "+totalTickets);
        return totalTickets;
    }
    catch (e) {
        console.log(e)
    }
}

async function serverCount(index, tenant_id) {
    const body = `{"query":"SELECT COUNT(distinct(hostname)) AS CNT  FROM ${index} WHERE tenant_id='${tenant_id}'`
                  + ` AND ticket_class='INCIDENT' AND open_dttm >= 'now-30d' and open_dttm < NOW() "}`;
    try {
        const res = await esManager.sqlSearch(JSON.parse(body));
        var serverCount = 0;
        if (res && res.rows)
            serverCount = res.rows[0][0];
        logger.info("Server count from ES Query: "+serverCount);
        return serverCount;
    }
    catch (e) {
        console.log(e)
    }
}


async function mttrInclCount(index, tenant_id) {
    const body = `{"query":"SELECT AVG(mttr_incl_hold) AS CNT  FROM ${index} WHERE tenant_id='${tenant_id}'`
                  + ` AND ticket_class='INCIDENT' AND open_dttm >= 'now-30d' and open_dttm < NOW() "}`;
    try {
        const res = await esManager.sqlSearch(JSON.parse(body));
        var mttrInclCount = 0;
        if (res && res.rows)
            mttrInclCount = res.rows[0][0];
        logger.info("MTTR INCL count from ES Query: "+parseFloat(mttrInclCount.toFixed(3)).toString());
        return parseFloat(mttrInclCount.toFixed(3)).toString();
    }
    catch (e) {
        console.log(e)
    }
}

async function siteIDCount(index, tenant_id) {
    const body = `{"query":"SELECT COUNT(distinct(server_site_id)) AS CNT  FROM ${index} WHERE tenant_id='${tenant_id}'`
                  + ` AND ticket_class='INCIDENT' AND server_site_id  is not null AND open_dttm >= 'now-30d' and open_dttm < NOW() order by CNT desc "}`;
                  
    try {
        const res = await esManager.sqlSearch(JSON.parse(body));
        var siteIDCount = 0;
        if (res && res.rows)
            siteIDCount = res.rows[0][0];
        logger.info("siteIDCount from ES Query:" +siteIDCount);
        return siteIDCount;
    }
    catch (e) {
        console.log(e)
    }
}

async function streetAddrCount(index, tenant_id) {
    const body = `{"query":"SELECT COUNT(distinct(server_street_address)) AS CNT  FROM ${index} WHERE tenant_id='${tenant_id}'`
                  + ` AND ticket_class='INCIDENT' AND server_site_id  is not null AND open_dttm >= 'now-30d' and open_dttm < NOW() order by CNT desc"}`;
                  
    try {
        const res = await esManager.sqlSearch(JSON.parse(body));
        var streetAddrCount = 0;
        if (res && res.rows)
            streetAddrCount = res.rows[0][0];
        logger.info("streetAddrCount from ES Query:" +streetAddrCount);
        return streetAddrCount;
    }
    catch (e) {
        console.log(e)
    }
}


async function countryViewCount(index, tenant_id) {
    const body = `{"query":"SELECT COUNT(distinct (server_country)) AS CNT  FROM ${index} WHERE tenant_id='${tenant_id}'`
                  + ` AND ticket_class='INCIDENT' AND server_site_id  is not null AND open_dttm >= 'now-30d' and open_dttm < NOW() order by CNT desc"}`;
                  
    try {
        const res = await esManager.sqlSearch(JSON.parse(body));
        var countryViewCount = 0;
        if (res && res.rows)
           countryViewCount = res.rows[0][0];
        logger.info("countryViewCount from ES Query:" +countryViewCount);
        return countryViewCount;
    }
    catch (e) {
        console.log(e)
    }
}

async function buildingIDView(index, tenant_id) {
    const body = `{"query":"SELECT COUNT(*) AS CNT,server_building_id FROM ${index} WHERE tenant_id='${tenant_id}' and ticket_class='INCIDENT' `
                    +` and open_dttm >= 'now-30d' and open_dttm < NOW() and server_building_id is not null group by server_building_id order by CNT desc"}`;
    try {
        const res = await esManager.sqlSearch(JSON.parse(body));
        let buildingObj = {};
        if (res && res.rows){
            res.rows.forEach(function (item){
                buildingObj[item[1]]=item[0];
            });
        }
        logger.info("Building ID view counts from ES Query:", buildingObj);
        return buildingObj;
    }
    catch (e) {
        console.log(e)
    }
}

async function streetAddrView(index, tenant_id) {
    const body = `{"query":"SELECT COUNT(*) AS CNT,server_street_address FROM ${index} WHERE tenant_id='${tenant_id}' and ticket_class='INCIDENT' `
                    +` and open_dttm >= 'now-30d' and open_dttm < NOW() and server_street_address is not null group by server_street_address order by CNT desc limit 25"}`;
    try {
        const res = await esManager.sqlSearch(JSON.parse(body));
        let streetAddrObj = {};
        if (res && res.rows){
            res.rows.forEach(function (item){
                streetAddrObj[item[1].replace(/\s\s+/g, ' ')]=item[0];
            });
        }
        logger.info("Street Address view counts from ES Query:", streetAddrObj);
        return streetAddrObj;
    }
    catch (e) {
        console.log(e)
    }
}

async function siteIDView(index, tenant_id) {
    const body = `{"query":"SELECT COUNT(*) AS CNT,server_site_id FROM ${index} WHERE tenant_id='${tenant_id}' and ticket_class='INCIDENT' `
                    +` and open_dttm >= 'now-30d' and open_dttm < NOW() and server_site_id is not null group by server_site_id order by CNT desc"}`;
    try {
        const res = await esManager.sqlSearch(JSON.parse(body));
        let siteIDObj = {};
        if (res && res.rows){
            res.rows.forEach(function (item){
                siteIDObj[item[1]]=item[0];
            });
        }
        logger.info("siteIDView counts from ES Query:", siteIDObj);
        return siteIDObj;
    }
    catch (e) {
        console.log(e)
    }
}

async function mttrExclCount(index, tenant_id) {
    const body = `{"query":"SELECT AVG(mttr_excl_hold) AS CNT  FROM ${index} WHERE tenant_id='${tenant_id}'`
                  + ` AND ticket_class='INCIDENT' AND open_dttm >= 'now-30d' and open_dttm < NOW() "}`;
    try {
        const res = await esManager.sqlSearch(JSON.parse(body));
        var mttrExclCount = 0;
        if (res && res.rows)
            mttrExclCount = res.rows[0][0];
        logger.info("MTTR EXCL count from ES Query: "+parseFloat(mttrExclCount.toFixed(3)).toString());
        return parseFloat(mttrExclCount.toFixed(3)).toString();
    }
    catch (e) {
        console.log(e)
    }
}

async function autoTicketCount(index, tenant_id){
    const body = `{"query": "SELECT count(*) as cnt FROM ${index} WHERE tenant_id = '${tenant_id}' and ticket_class = 'INCIDENT' `
        +`and open_dttm >= (now()-INTERVAL 30 DAYS) and open_dttm < now() and autogenerated = 'Y'"}`;
    try {
        const res = await esManager.sqlSearch(JSON.parse(body));
        var autoCount = 0;
        if (res && res.rows)
            autoCount = res.rows[0][0];
        logger.info("Auto ticket count from ES Query: "+autoCount);
        return autoCount;
    }
    catch (e) {
        console.log(e)
    }
}

async function userTicketCount(index, tenant_id){
    const body = `{"query": "SELECT count(*) as cnt FROM ${index} WHERE tenant_id = '${tenant_id}' and ticket_class = 'INCIDENT' `
        +`and open_dttm >= (now()-INTERVAL 30 DAYS) and open_dttm < now() and autogenerated = 'N'"}`;
    try {
        const res = await esManager.sqlSearch(JSON.parse(body));
        var userCount = 0;
        if (res && res.rows)
            userCount = res.rows[0][0];
        logger.info("User ticket count from ES Query: "+userCount);
        return userCount;
    }
    catch (e) {
        console.log(e)
    }
}

async function Top50Servers(index, tenant_id) {
    const body = `{"query":"SELECT COUNT(1) AS CNT,hostname  FROM ${index} WHERE tenant_id='${tenant_id}' AND ticket_class='INCIDENT' `
                  + ` AND open_dttm >= 'now-30d' and open_dttm < NOW() and hostname is not null group by hostname having CNT>1 order by CNT desc limit  50"}`;
    try {
        const res = await esManager.sqlSearch(JSON.parse(body));
        var top50ServerList = [];
        if (res && res.rows){
            res.rows.forEach(function (item){
                top50ServerList.push(item[1]);
            });
        }
        return top50ServerList;
    }
    catch (e) {
        console.log(e)
    }
}

async function serverFunction(index, tenant_id) {
    const body = `{"query":"SELECT COUNT(1) AS CNT,server_function  FROM ${index} WHERE tenant_id='${tenant_id}' AND ticket_class='INCIDENT' `
                    +` AND open_dttm >= 'now-30d' and open_dttm < NOW() and server_function is not null group by server_function order by CNT desc limit  100"}`;
    try {
        const res = await esManager.sqlSearch(JSON.parse(body));
        let serverFunctionObj = {};
        if (res && res.rows){
            res.rows.forEach(function (item){
                serverFunctionObj[item[1].trim()]=item[0];
            });
        }
        return serverFunctionObj;
    }
    catch (e) {
        console.log(e)
    }
}

async function OpCo(index, tenant_id) {
    const body = `{"query":"SELECT COUNT(1) AS CNT,company  FROM ${index} WHERE tenant_id='${tenant_id}' AND ticket_class='INCIDENT' `
                    +` AND open_dttm >= 'now-30d' and open_dttm < NOW() and company is not null group by company order by CNT desc limit  100"}`;
    try {
        const res = await esManager.sqlSearch(JSON.parse(body));
        let OpCoObj = {};
        if (res && res.rows){
            res.rows.forEach(function (item){
                OpCoObj[item[1]]=item[0];
            });
        }
        return OpCoObj;
    }
    catch (e) {
        console.log(e)
    }
}

async function top50Category(index, tenant_id) {
    const body = `{"query":"SELECT COUNT(1) AS CNT,ticket_category  FROM ${index} WHERE tenant_id='${tenant_id}' AND ticket_class='INCIDENT' `
                 + ` AND open_dttm >= 'now-30d' and open_dttm < NOW() and ticket_category is not null group by ticket_category order by CNT desc limit  50"}`;
    try {
        const res = await esManager.sqlSearch(JSON.parse(body));
        let top50CategoryObj = {};
        if (res && res.rows){
            res.rows.forEach(function (item){
                top50CategoryObj[item[1]]=item[0];
            });
        }
        return top50CategoryObj;
    }
    catch (e) {
        console.log(e)
    }
}

async function assignmentGroup(index, tenant_id) {
    const body = `{"query":"SELECT COUNT(1) AS CNT,assignment_group  FROM ${index} WHERE tenant_id='${tenant_id}' AND ticket_class='INCIDENT' `
                + ` AND open_dttm >= 'now-30d' and open_dttm < NOW() and assignment_group is not null group by assignment_group order by CNT desc limit  100"}`;
    try {
        const res = await esManager.sqlSearch(JSON.parse(body));
        let assignmentGroupObj = {};
        if (res && res.rows){
            res.rows.forEach(function (item){
                assignmentGroupObj[item[1]]=item[0];
            });
        }
        return assignmentGroupObj;
    }
    catch (e) {
        console.log(e)
    }
}

async function monthWiseTrend(index, tenant_id) {
    const body = `{"query":"SELECT COUNT(1) AS CNT,year_month_created  FROM ${index} WHERE tenant_id='${tenant_id}' AND ticket_class='INCIDENT' `
                    + ` AND open_dttm >= 'now-30d' and open_dttm < NOW()  group by year_month_created "}`;
    try {
        const res = await esManager.sqlSearch(JSON.parse(body));
        let monthWiseTrendObj = {};
        if (res && res.rows){
            res.rows.forEach(function (item){
                monthWiseTrendObj[item[1]]=item[0];
            });
        }
        return monthWiseTrendObj;
    }
    catch (e) {
        console.log(e)
    }
}

async function weekWiseTrend(index, tenant_id, xAxisLabels) {
    const body = `{"query":"SELECT COUNT(1) AS CNT,created_week FROM ${index} WHERE tenant_id='${tenant_id}' AND ticket_class='INCIDENT' `
                 + ` AND open_dttm >= 'now-30d' and open_dttm < NOW() and created_week is not null group by created_week "}`;
    try {
        const res = await esManager.sqlSearch(JSON.parse(body));
        let weekWiseTrendObj = {};
        let listOfWeeks = xAxisLabels.map(Number);
        if (res && res.rows){
            res.rows.forEach(function (item){
                // Verifying X axis labels from UI 
                if(listOfWeeks.includes(item[1])){
                    weekWiseTrendObj[item[1]]=item[0];
                }
            });
        }
        logger.info("Week wise trend Json Obj: ", weekWiseTrendObj);
        return weekWiseTrendObj;
    }
    catch (e) {
        console.log(e)
    }
}

async function timeAndDayAlertTriggered(index, tenant_id) {
    const body = `{"query":"SELECT COUNT(1) AS CNT,created_day_name,created_hour  FROM ${index} WHERE tenant_id='${tenant_id}' AND ticket_class='INCIDENT' `
                + ` AND open_dttm >= 'now-30d' and open_dttm < NOW() GROUP BY created_day_name,created_hour "}`;
    try {
        const res = await esManager.sqlSearch(JSON.parse(body));
        let timeAndDayAlertTriggeredObj = {};
        if (res && res.rows){
            res.rows.forEach(function (item){
                if(item[1] != null){
                    let tmpObj = {};
                    if(timeAndDayAlertTriggeredObj.hasOwnProperty(item[1])){
                        tmpObj = timeAndDayAlertTriggeredObj[item[1]];
                        tmpObj[item[2]] = item[0];
                        timeAndDayAlertTriggeredObj[item[1]] = tmpObj;
                    }else {
                        tmpObj[item[2]] = item[0];
                        timeAndDayAlertTriggeredObj[item[1]] = tmpObj;
                    }
                }
            });
        }
        return timeAndDayAlertTriggeredObj;
    }
    catch (e) {
        console.log(e)
    }
}

async function getTopCategoryView(index, tenant_id, days){
    const body = `{"query": "SELECT count(*) as cnt, ticket_category FROM ${index} WHERE tenant_id = '${tenant_id}' and ticket_class = 'INCIDENT' `
        +`and open_dttm >= (now()-INTERVAL ${days} DAYS) and open_dttm < now() and ticket_category is not null group by ticket_category order by cnt desc limit 50"}`;
    try {
        const res = await esManager.sqlSearch(body);
        var topCategoryView = [];
        if (res && res.rows){
            res.rows.forEach(function (item){
                if(item[1] != null){
                    topCategoryView.push(item[1]);
                }
            });
        }
        logger.info("Top Category View from ES query: "+ topCategoryView);
        return topCategoryView;
    	 }
    catch(e){
        logger.info(e);
    }
}

async function getCategoryViewForTop10Address(index, tenant_id, yAxisLabels){
    var totalCountList = [];
    var yAxisLabelsListLength = yAxisLabels.length;
    if(yAxisLabelsListLength > 5){
        yAxisLabelsListLength = 5;
    }
    // Loop to travese through each category [y-axis labels] name
    for(var j=0; j<yAxisLabelsListLength; j++){
        var categoryCountList = [];
        const body = `{"query": "SELECT count(*) as cnt, person_addressline1, ticket_category FROM ${index} WHERE tenant_id = '${tenant_id}' and `
            +`ticket_class = 'INCIDENT' and open_dttm >= (now()-INTERVAL 30 DAYS) and open_dttm < now() and ticket_category = '${yAxisLabels[j]}' and `
            +`person_addressline1 is not null group by person_addressline1, ticket_category order by cnt desc limit 10"}`;
        try {
            const res = await esManager.sqlSearch(JSON.parse(body));
            if (res && res.rows){
                res.rows.forEach(function (item){
                    categoryCountList.push(item[0]);
                });
            }
        }
        catch (e) {
            console.log(e);
        }
        logger.info("Category based List count for "+yAxisLabels[j]+": ", categoryCountList);
        totalCountList.push(categoryCountList);
    }
    logger.info("Category based List of count list from ES Query: ", totalCountList);
    return totalCountList;
}

module.exports = {
    totalTickets: totalTickets,
    serverCount: serverCount,
    mttrInclCount:mttrInclCount,
    mttrExclCount:mttrExclCount,
    autoTicketCount:autoTicketCount,
    userTicketCount:userTicketCount,
    Top50Servers : Top50Servers,
    serverFunction: serverFunction,
    OpCo:OpCo,
    top50Category:top50Category,
    assignmentGroup:assignmentGroup,
    monthWiseTrend:monthWiseTrend,
    weekWiseTrend:weekWiseTrend,
    timeAndDayAlertTriggered:timeAndDayAlertTriggered,
    getTopCategoryView:getTopCategoryView,
    getCategoryViewForTop10Address:getCategoryViewForTop10Address,
    siteIDCount:siteIDCount,
    streetAddrCount:streetAddrCount,
    countryViewCount:countryViewCount,
    buildingIDView:buildingIDView,
    streetAddrView: streetAddrView,
    siteIDView: siteIDView
}