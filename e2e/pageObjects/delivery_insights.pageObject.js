"use strict";
var extend = require('extend');
var url = browser.params.url;
var logGenerator = require("../../helpers/logGenerator.js"),
	logger = logGenerator.getApplicationLogger();
var EC = protractor.ExpectedConditions;
var util = require('../../helpers/util.js');
var timeout = require('../../testData/timeout.json');
var frames = require('../../testData/frames.json');


var defaultConfig = {
	deliveryInsightHeaderTileTextCss : "#fullwrapperDiv h2.iframeTitle",
	transformationMetricsFirstRowCountCss : ".kbnTableCellFilter__hover.text-center a b",
    totalTicketsXpath : "//div[contains(text(), '{0}')]/..//div[@class='mtrVis__value']",
    actionPlanEnhancedTableTicketsCounts :  "//div[contains(text(), '{0}')]/..//div['kbnAggTable__paginated']",
    actionPlanIdsCounts :  "//div[contains(text(), '{0}')]/..//b",
    actionPlanMultipleTextIdCounts :  "(//div[contains(text(), '{0}')]/..//b)[{1}]",
    spanTextXpath : "//span[contains(text(), '{0}')]",
    aContainsTextXpath : "//a[contains(text(), '{0}')]",
    divContainsTextXpath : "//div[contains(text(), '{0}')]",
    actionPlanAddIdsCountXpath : "(//b[contains(text(), '{0}')]/..//b)[{1}]",
    automationSummaryActionPlanCss :"//p[contains(text(),'Automation Summary Action Plans')]",
    ticketsCountCss: "div.mtrVis__value span",
    opportunityCountCss: "div.tbvChartCellContent b"

    /*td.text-center div b*/


}

function delivery(selectorConfig) {
	if (!(this instanceof delivery)) {
		return new delivery(selectorConfig);
	}
	extend(this, defaultConfig);

	if (selectorConfig) {
		extend(this, selectorConfig);
	}
}

/**
 * Method to perform switch to default content then switch to frame
 */
delivery.prototype.open = function(){
	util.waitForAngular();
	util.switchToDefault();
	util.waitForAngular();
	util.switchToFrameById(frames.mcmpIframe);
	util.waitForAngular();
};
/**
 * Method to get actionable insight header title text
 */
delivery.prototype.getDeliveryInsightHeaderTitleText = function(){
	util.waitForAngular();
	browser.wait(EC.visibilityOf(element(by.css(this.deliveryInsightHeaderTileTextCss))), timeout.timeoutInMilis);
	return element(by.css(this.deliveryInsightHeaderTileTextCss)).getText().then(function(text){
		logger.info("Delivery insights page header title text : "+text);
		return text;
	});
};

delivery.prototype.getDeliveryInsightAutoGeneratedTicketsFlowingText = function(){
	util.waitForAngular();
	var xpathSelector = this.divContainsTextXpath.format('Auto Generated Tickets flowing into Automation Engine');
	util.switchToFrameById(frames.cssrIFrame);
	browser.wait(EC.visibilityOf(element(by.xpath(xpathSelector))), timeout.timeoutInMilis);
	return element(by.xpath(xpathSelector)).getText().then(function(summaryText){
		logger.info("Delivery insights Auto Generated Tickets flowing into Automation Engine summary text : "+summaryText);
		return summaryText;
	});
};

delivery.prototype.getDeliveryInsightAContainXpathTicketCount = function(action_plan_name){
      	util.waitForAngular();
      	util.switchToFrameById(frames.cssrIFrame);
      	browser.wait(EC.visibilityOf(element(by.xpath(this.aContainsTextXpath.format(action_plan_name)))), timeout.timeoutInMilis);
      	return element(by.xpath(this.aContainsTextXpath.format(action_plan_name))).getText().then(function(summaryText){
      		logger.info("Delivery insights widget count : "+summaryText);
      		return summaryText;
      	});
      };

delivery.prototype.getDeliveryInsightSpanXpathTicketCount = function(action_plan_name){
      	util.waitForAngular();
      	util.switchToFrameById(frames.cssrIFrame);
      	browser.wait(EC.visibilityOf(element(by.xpath(this.spanTextXpath.format(action_plan_name)))), timeout.timeoutInMilis);
      	return element(by.xpath(this.spanTextXpath.format(action_plan_name))).getText().then(function(summaryText){
      		logger.info("Delivery insights widget count : "+summaryText);
      		return summaryText;
      	});
      };


delivery.prototype.getDeliveryInsightActionPlanTotalTicketCount = function(action_plan_name){
      	util.waitForAngular();
      	util.switchToFrameById(frames.cssrIFrame);
      	browser.wait(EC.visibilityOf(element(by.xpath(this.totalTicketsXpath.format(action_plan_name)))), timeout.timeoutInMilis);
      	return element(by.xpath(this.totalTicketsXpath.format(action_plan_name))).getText().then(function(summaryText){
      		logger.info("Delivery insights widget count : "+summaryText);
      		return summaryText;
      	});
      };

delivery.prototype.getDeliveryInsightActionPlanEnhancedTablesTicketCount = function(action_plan_name){
      	util.waitForAngular();
      	util.switchToFrameById(frames.cssrIFrame);
      	browser.wait(EC.visibilityOf(element(by.xpath(this.actionPlanEnhancedTableTicketsCounts.format(action_plan_name)))), timeout.timeoutInMilis);
      	return element(by.xpath(this.actionPlanEnhancedTableTicketsCounts.format(action_plan_name))).getText().then(function(summaryText){
      		logger.info("Delivery insights widget count : "+summaryText);
      		return summaryText;
      	});
      };

delivery.prototype.getDeliveryInsightActionPlanIdCount = function(action_plan_name){
      	util.waitForAngular();
      	util.switchToFrameById(frames.cssrIFrame);
      	browser.wait(EC.visibilityOf(element(by.xpath(this.actionPlanIdsCounts.format(action_plan_name)))), timeout.timeoutInMilis);
      	return element(by.xpath(this.actionPlanIdsCounts.format(action_plan_name))).getText().then(function(summaryText){
      		logger.info("Delivery insights widget count : "+summaryText);
      		return summaryText;
      	});
      };

delivery.prototype.getDeliveryInsightActionPlanMultipleTextIdCount = function(action_plan_name,index_id){
      	util.waitForAngular();
      	util.switchToFrameById(frames.cssrIFrame);
      	browser.wait(EC.visibilityOf(element(by.xpath(this.actionPlanMultipleTextIdCounts.format(action_plan_name,index_id)))), timeout.timeoutInMilis);
      	return element(by.xpath(this.actionPlanMultipleTextIdCounts.format(action_plan_name,index_id))).getText().then(function(summaryText){
      		logger.info("Delivery insights widget count : "+summaryText);
      		return summaryText;
      	});
      };

delivery.prototype.getDeliveryInsightActionPlanAddIdCount = function(action_plan_name,index_id){
      	util.waitForAngular();
      	util.switchToFrameById(frames.cssrIFrame);
      	browser.wait(EC.visibilityOf(element(by.xpath(this.actionPlanAddIdsCountXpath.format(action_plan_name,index_id)))), timeout.timeoutInMilis);
      	return element(by.xpath(this.actionPlanAddIdsCountXpath.format(action_plan_name,index_id))).getText().then(function(summaryText){
      		logger.info("Dashboard insights widget count : "+summaryText);
      		return summaryText;
      	});
      };

delivery.prototype.clickOnActionPlan = function(){
	var self = this;
	util.waitForAngular();
	browser.wait(EC.visibilityOf(element(by.xpath(self.automationSummaryActionPlanCss))), timeout.timeoutInMilis);
	return element(by.xpath(self.automationSummaryActionPlanCss)).click().then(function(){
		logger.info("Automation summary action plan is clicked");
	});
};



module.exports = delivery;
